{"ast":null,"code":"import _asyncToGenerator from \"D:/client/final/angular-shell/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ErrorHandler, inject, Injectable, HostListener, PLATFORM_ID, ViewContainerRef, TemplateRef, ChangeDetectorRef, Directive, Input, Renderer2, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { Subscription, BehaviorSubject, animationFrameScheduler, debounceTime, EMPTY, catchError, from, switchMap, mergeMap } from 'rxjs';\nconst LAZY_ELEMENT_CONFIGS = new InjectionToken('LAZY_ELEMENT_CONFIGS');\nconst LAZY_ELEMENT_ROOT_OPTIONS = new InjectionToken('LAZY_ELEMENT_ROOT_OPTIONS');\nconst LAZY_ELEMENT_ROOT_GUARD = new InjectionToken('LAZY_ELEMENT_ROOT_GUARD');\nconst LAZY_ELEMENTS_REGISTRY = new InjectionToken('LAZY_ELEMENTS_REGISTRY', {\n  providedIn: 'root',\n  factory: () => new Map()\n});\nconst LOG_PREFIX$2 = '@angular-extensions/elements';\n\nclass LazyElementsLoaderService {\n  static controller = new AbortController();\n  configs = [];\n  errorHandler = inject(ErrorHandler);\n  registry = inject(LAZY_ELEMENTS_REGISTRY);\n  options = inject(LAZY_ELEMENT_ROOT_OPTIONS, {\n    optional: true\n  }) ?? {};\n\n  addConfigs(newConfigs) {\n    newConfigs.forEach(newConfig => {\n      const existingConfig = this.getElementConfig(newConfig.tag);\n\n      if (existingConfig) {\n        ngDevMode && console.warn(`${LOG_PREFIX$2} - ElementConfig for tag '${newConfig.tag}' was previously added, it will not be added multiple times, continue...`);\n      } else {\n        newConfig.isAdded = true;\n        this.configs.push(newConfig);\n        const shouldPreload = newConfig.preload !== undefined ? newConfig.preload : this.options.preload;\n\n        if (shouldPreload) {\n          this.loadElement(newConfig.url, newConfig.tag, newConfig.isModule, newConfig.importMap, newConfig.hooks);\n        }\n      }\n    });\n  }\n\n  getElementConfig(tag) {\n    return this.configs.find(config => config.tag === tag);\n  }\n\n  preload(tags) {\n    let configs = this.configs;\n\n    if (tags) {\n      configs = this.configs.filter(config => tags.includes(config.tag));\n    }\n\n    configs.forEach(config => this.loadElement(config.url, config.tag, config.isModule, config.importMap, config.hooks));\n  }\n\n  loadElement(url, tag, isModule, importMap, hooksConfig) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const config = _this.getElementConfig(tag);\n\n      isModule ??= config?.isModule ?? _this.options.isModule;\n      importMap ??= config?.importMap ?? _this.options.importMap;\n\n      if (ngDevMode && !tag) {\n        throw new Error(`${LOG_PREFIX$2} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);\n      }\n\n      if (!url) {\n        if (ngDevMode && !config?.url && !importMap) {\n          throw new Error(`${LOG_PREFIX$2} - url for <${tag}> not found`);\n        } else if (importMap) {\n          url = tag;\n        } else {\n          url = config.url;\n        }\n      }\n\n      if (!_this.hasElement(url)) {\n        const notifier = _this.addElement(url);\n\n        const beforeLoadHook = hooksConfig?.beforeLoad ?? config?.hooks?.beforeLoad ?? _this.options?.hooks?.beforeLoad;\n        const afterLoadHook = hooksConfig?.afterLoad ?? config?.hooks?.afterLoad ?? _this.options?.hooks?.afterLoad;\n\n        if (importMap) {\n          url = yield _this.resolveImportMap(url);\n        }\n\n        const script = document.createElement('script');\n\n        if (isModule) {\n          script.type = 'module';\n        }\n\n        script.src = url;\n\n        const onLoad = () => {\n          if (afterLoadHook) {\n            _this.handleHook(afterLoadHook, tag).then(notifier.resolve).catch(notifier.reject);\n          } else {\n            notifier.resolve();\n          }\n\n          cleanup();\n        };\n\n        const onError = error => {\n          notifier.reject(error);\n          cleanup(); // Caretaker note: don't put it before the `reject` and `cleanup` since the user may have some\n          // custom error handler that will re-throw the error through `throw error`. Hence the code won't\n          // be executed, and the promise won't be rejected.\n\n          _this.errorHandler.handleError(error);\n        }; // The `load` and `error` event listeners capture `this`. That's why they have to be removed manually.\n        // Otherwise, the `LazyElementsLoaderService` is not going to be GC'd.\n\n\n        function cleanup() {\n          script.removeEventListener('load', onLoad);\n          script.removeEventListener('error', onError);\n        }\n\n        script.addEventListener('load', onLoad, {\n          signal: LazyElementsLoaderService.controller?.signal\n        });\n        script.addEventListener('error', onError, {\n          signal: LazyElementsLoaderService.controller?.signal\n        });\n\n        if (beforeLoadHook) {\n          _this.handleHook(beforeLoadHook, tag).then(() => document.body.appendChild(script)).catch(notifier.reject);\n        } else {\n          document.body.appendChild(script);\n        }\n      }\n\n      return _this.registry.get(_this.stripUrlProtocol(url));\n    })();\n  }\n\n  addElement(url) {\n    let notifier;\n    this.registry.set(this.stripUrlProtocol(url), new Promise((resolve, reject) => notifier = {\n      resolve,\n      reject\n    }));\n    return notifier;\n  }\n\n  hasElement(url) {\n    return this.registry.has(this.stripUrlProtocol(url));\n  }\n\n  stripUrlProtocol(url) {\n    return url.replace(/https?:\\/\\//, '');\n  }\n\n  handleHook(hook, tag) {\n    try {\n      return Promise.resolve(hook(tag));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  resolveImportMap(url) {\n    return _asyncToGenerator(function* () {\n      const System = window.System;\n\n      if (System) {\n        yield System.prepareImport();\n        url = System.resolve(url);\n      } else if (ngDevMode) {\n        throw new Error(`${LOG_PREFIX$2} - importMap feature depends on SystemJS library to be globally loaded but none was found, thus '${url}' can't be resolved. You should either load SystemJS or remove the importMap flag.`);\n      }\n\n      return url;\n    })();\n  }\n\n  ngOnDestroy() {\n    LazyElementsLoaderService.controller?.abort();\n    LazyElementsLoaderService.controller = null;\n  }\n\n  static ɵfac = function LazyElementsLoaderService_Factory(t) {\n    return new (t || LazyElementsLoaderService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LazyElementsLoaderService,\n    factory: LazyElementsLoaderService.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyElementsLoaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, {\n    ngOnDestroy: [{\n      type: HostListener,\n      args: ['unloaded']\n    }]\n  });\n})();\n\nconst LOG_PREFIX$1 = '@angular-extensions/elements';\n\nclass LazyElementDirective {\n  url = null;\n  loadingTemplateRef = null;\n  errorTemplateRef = null;\n  isModule; // eslint-disable-line @angular-eslint/no-input-rename\n\n  importMap = false; // eslint-disable-line @angular-eslint/no-input-rename\n\n  viewRef = null;\n  subscription = Subscription.EMPTY;\n  url$ = new BehaviorSubject(null);\n  platformId = inject(PLATFORM_ID);\n  vcr = inject(ViewContainerRef);\n  template = inject(TemplateRef);\n  elementsLoaderService = inject(LazyElementsLoaderService);\n  cdr = inject(ChangeDetectorRef);\n\n  ngOnChanges(changes) {\n    if (changes.url) {\n      this.url$.next(this.url);\n    }\n  }\n\n  ngOnInit() {\n    // There's no sense to execute the below logic on the Node.js side since the JavaScript\n    // will not be loaded on the server-side (Angular will only append the script to body).\n    // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.\n    // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.setupUrlListener();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  destroyEmbeddedView() {\n    if (this.viewRef && !this.viewRef.destroyed) {\n      this.viewRef.detach();\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  setupUrlListener() {\n    const tpl = this.template;\n    const elementTag = tpl._declarationTContainer ? tpl._declarationTContainer.tagName || tpl._declarationTContainer.value : tpl._def.element.template.nodes[0].element.name;\n    const elementConfig = this.elementsLoaderService.getElementConfig(elementTag) || {};\n    const options = this.elementsLoaderService.options;\n    const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n    this.subscription = this.url$.pipe( // This is used to coalesce changes since the `url$` subject might emit multiple values initially, e.g.\n    // `null` (initial value) and the url itself (when the `url` binding is provided).\n    // The `animationFrameScheduler` is used to prevent the frame drop.\n    debounceTime(0, animationFrameScheduler), switchMap(url => {\n      if (this.loadingTemplateRef) {\n        this.vcr.createEmbeddedView(this.loadingTemplateRef);\n      } else if (loadingComponent) {\n        this.vcr.createComponent(loadingComponent);\n      }\n\n      return from(this.elementsLoaderService.loadElement(url, elementTag, this.isModule, this.importMap, elementConfig?.hooks)).pipe(catchError(() => {\n        this.vcr.clear();\n        const errorComponent = elementConfig.errorComponent || options.errorComponent;\n\n        if (this.errorTemplateRef) {\n          this.vcr.createEmbeddedView(this.errorTemplateRef);\n          this.cdr.markForCheck();\n        } else if (errorComponent) {\n          this.vcr.createComponent(errorComponent);\n          this.cdr.markForCheck();\n        } else if (ngDevMode) {\n          console.error(`${LOG_PREFIX$1} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element`);\n        }\n\n        return EMPTY;\n      }));\n    }), mergeMap(() => customElements.whenDefined(elementTag))).subscribe({\n      next: () => {\n        this.vcr.clear();\n        this.viewRef = this.vcr.createEmbeddedView(this.template);\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  static ɵfac = function LazyElementDirective_Factory(t) {\n    return new (t || LazyElementDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LazyElementDirective,\n    selectors: [[\"\", \"axLazyElement\", \"\"]],\n    inputs: {\n      url: [\"axLazyElement\", \"url\"],\n      loadingTemplateRef: [\"axLazyElementLoadingTemplate\", \"loadingTemplateRef\"],\n      errorTemplateRef: [\"axLazyElementErrorTemplate\", \"errorTemplateRef\"],\n      isModule: [\"axLazyElementModule\", \"isModule\"],\n      importMap: [\"axLazyElementImportMap\", \"importMap\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyElementDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[axLazyElement]'\n    }]\n  }], null, {\n    url: [{\n      type: Input,\n      args: ['axLazyElement']\n    }],\n    loadingTemplateRef: [{\n      type: Input,\n      args: ['axLazyElementLoadingTemplate']\n    }],\n    errorTemplateRef: [{\n      type: Input,\n      args: ['axLazyElementErrorTemplate']\n    }],\n    isModule: [{\n      type: Input,\n      args: ['axLazyElementModule']\n    }],\n    importMap: [{\n      type: Input,\n      args: ['axLazyElementImportMap']\n    }]\n  });\n})();\n\nconst LOG_PREFIX = '@angular-extensions/elements';\n\nclass LazyElementDynamicDirective {\n  tag = null;\n  url = null; // eslint-disable-line @angular-eslint/no-input-rename\n\n  loadingTemplateRef = null;\n  errorTemplateRef = null;\n  isModule = false; // eslint-disable-line @angular-eslint/no-input-rename\n\n  importMap = false; // eslint-disable-line @angular-eslint/no-input-rename\n\n  viewRef = null;\n  subscription = Subscription.EMPTY;\n  platformId = inject(PLATFORM_ID);\n  document = inject(DOCUMENT);\n  renderer = inject(Renderer2);\n  vcr = inject(ViewContainerRef);\n  cdr = inject(ChangeDetectorRef);\n  template = inject(TemplateRef);\n  elementsLoaderService = inject(LazyElementsLoaderService);\n\n  ngOnInit() {\n    // There's no sense to execute the below logic on the Node.js side since the JavaScript\n    // will not be loaded on the server-side (Angular will only append the script to body).\n    // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.\n    // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    if (ngDevMode) {\n      if (!this.tag || this.tag.length === 0 || !this.tag.includes('-')) {\n        throw new Error(`${LOG_PREFIX} - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic=\"'some-tag'\"), got: \"${this.tag}\"`);\n      }\n    }\n\n    const tag = this.tag;\n    const elementConfig = this.elementsLoaderService.getElementConfig(tag) || {};\n    const options = this.elementsLoaderService.options;\n    const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n\n    if (this.loadingTemplateRef) {\n      this.vcr.createEmbeddedView(this.loadingTemplateRef);\n    } else if (loadingComponent) {\n      this.vcr.createComponent(loadingComponent);\n    }\n\n    const loadElement$ = from(this.elementsLoaderService.loadElement(this.url, tag, this.isModule, this.importMap, elementConfig?.hooks));\n    this.subscription = loadElement$.pipe(mergeMap(() => customElements.whenDefined(tag))).subscribe({\n      next: () => {\n        this.vcr.clear();\n        const originalCreateElement = this.renderer.createElement;\n\n        this.renderer.createElement = (name, namespace) => {\n          if (name === 'ax-lazy-element') {\n            name = tag;\n          }\n\n          return this.document.createElement(name);\n        };\n\n        this.viewRef = this.vcr.createEmbeddedView(this.template);\n        this.renderer.createElement = originalCreateElement;\n        this.cdr.markForCheck();\n      },\n      error: error => {\n        const errorComponent = elementConfig.errorComponent || options.errorComponent;\n        this.vcr.clear();\n\n        if (this.errorTemplateRef) {\n          this.vcr.createEmbeddedView(this.errorTemplateRef);\n          this.cdr.markForCheck();\n        } else if (errorComponent) {\n          this.vcr.createComponent(errorComponent);\n          this.cdr.markForCheck();\n        } else if (ngDevMode) {\n          console.error(`${LOG_PREFIX} - Loading of element <${this.tag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic=\"errorTemplate: error\" to display customized error message in place of element\\n\\n`, error);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  destroyEmbeddedView() {\n    if (this.viewRef && !this.viewRef.destroyed) {\n      this.viewRef.detach();\n      this.viewRef.destroy();\n      this.viewRef = null;\n    }\n  }\n\n  static ɵfac = function LazyElementDynamicDirective_Factory(t) {\n    return new (t || LazyElementDynamicDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LazyElementDynamicDirective,\n    selectors: [[\"\", \"axLazyElementDynamic\", \"\"]],\n    inputs: {\n      tag: [\"axLazyElementDynamic\", \"tag\"],\n      url: [\"axLazyElementDynamicUrl\", \"url\"],\n      loadingTemplateRef: [\"axLazyElementDynamicLoadingTemplate\", \"loadingTemplateRef\"],\n      errorTemplateRef: [\"axLazyElementDynamicErrorTemplate\", \"errorTemplateRef\"],\n      isModule: [\"axLazyElementDynamicModule\", \"isModule\"],\n      importMap: [\"axLazyElementDynamicImportMap\", \"importMap\"]\n    }\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyElementDynamicDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[axLazyElementDynamic]'\n    }]\n  }], null, {\n    tag: [{\n      type: Input,\n      args: ['axLazyElementDynamic']\n    }],\n    url: [{\n      type: Input,\n      args: ['axLazyElementDynamicUrl']\n    }],\n    loadingTemplateRef: [{\n      type: Input,\n      args: ['axLazyElementDynamicLoadingTemplate']\n    }],\n    errorTemplateRef: [{\n      type: Input,\n      args: ['axLazyElementDynamicErrorTemplate']\n    }],\n    isModule: [{\n      type: Input,\n      args: ['axLazyElementDynamicModule']\n    }],\n    importMap: [{\n      type: Input,\n      args: ['axLazyElementDynamicImportMap']\n    }]\n  });\n})();\n\nfunction createLazyElementRootGuard(rootOptions) {\n  if (ngDevMode && rootOptions) {\n    throw new TypeError(`LazyElementsModule.forRoot() called twice. Feature modules should use LazyElementsModule.forFeature() instead.`);\n  }\n\n  return 'LazyElementsModule.forRoot() multiple execution guard';\n}\n\nclass LazyElementsModule {\n  static forRoot(options) {\n    return {\n      ngModule: LazyElementsModule,\n      providers: [{\n        provide: LAZY_ELEMENT_CONFIGS,\n        useValue: options && options.elementConfigs ? options.elementConfigs : [],\n        multi: true\n      }, {\n        provide: LAZY_ELEMENT_ROOT_OPTIONS,\n        useValue: options.rootOptions ? options.rootOptions : {}\n      }, {\n        provide: LAZY_ELEMENT_ROOT_GUARD,\n        useFactory: createLazyElementRootGuard,\n        deps: [[LAZY_ELEMENT_ROOT_OPTIONS, new Optional(), new SkipSelf()]]\n      }]\n    };\n  }\n\n  static forFeature(options) {\n    return {\n      ngModule: LazyElementsModule,\n      providers: [{\n        provide: LAZY_ELEMENT_CONFIGS,\n        useValue: options && options.elementConfigs ? options.elementConfigs : [],\n        multi: true\n      }]\n    };\n  }\n\n  lazyElementsLoaderService = inject(LazyElementsLoaderService);\n  elementConfigsMultiProvider = inject(LAZY_ELEMENT_CONFIGS, {\n    optional: true\n  });\n  guard = inject(LAZY_ELEMENT_ROOT_GUARD, {\n    optional: true\n  });\n\n  constructor() {\n    if (this.elementConfigsMultiProvider && this.elementConfigsMultiProvider.length) {\n      this.elementConfigsMultiProvider.filter(configs => configs.some(config => !config.isAdded)).forEach(configs => this.lazyElementsLoaderService.addConfigs(configs));\n    }\n  }\n\n  static ɵfac = function LazyElementsModule_Factory(t) {\n    return new (t || LazyElementsModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LazyElementsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LazyElementsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LazyElementDirective, LazyElementDynamicDirective],\n      imports: [CommonModule],\n      exports: [LazyElementDirective, LazyElementDynamicDirective]\n    }]\n  }], () => [], null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LAZY_ELEMENTS_REGISTRY, LAZY_ELEMENT_CONFIGS, LAZY_ELEMENT_ROOT_GUARD, LAZY_ELEMENT_ROOT_OPTIONS, LazyElementDirective, LazyElementDynamicDirective, LazyElementsLoaderService, LazyElementsModule, createLazyElementRootGuard };","map":{"version":3,"names":["i0","InjectionToken","ErrorHandler","inject","Injectable","HostListener","PLATFORM_ID","ViewContainerRef","TemplateRef","ChangeDetectorRef","Directive","Input","Renderer2","Optional","SkipSelf","NgModule","isPlatformServer","DOCUMENT","CommonModule","Subscription","BehaviorSubject","animationFrameScheduler","debounceTime","EMPTY","catchError","from","switchMap","mergeMap","LAZY_ELEMENT_CONFIGS","LAZY_ELEMENT_ROOT_OPTIONS","LAZY_ELEMENT_ROOT_GUARD","LAZY_ELEMENTS_REGISTRY","providedIn","factory","Map","LOG_PREFIX$2","LazyElementsLoaderService","controller","AbortController","configs","errorHandler","registry","options","optional","addConfigs","newConfigs","forEach","newConfig","existingConfig","getElementConfig","tag","ngDevMode","console","warn","isAdded","push","shouldPreload","preload","undefined","loadElement","url","isModule","importMap","hooks","find","config","tags","filter","includes","hooksConfig","Error","hasElement","notifier","addElement","beforeLoadHook","beforeLoad","afterLoadHook","afterLoad","resolveImportMap","script","document","createElement","type","src","onLoad","handleHook","then","resolve","catch","reject","cleanup","onError","error","handleError","removeEventListener","addEventListener","signal","body","appendChild","get","stripUrlProtocol","set","Promise","has","replace","hook","err","System","window","prepareImport","ngOnDestroy","abort","ɵfac","ɵprov","args","LOG_PREFIX$1","LazyElementDirective","loadingTemplateRef","errorTemplateRef","viewRef","subscription","url$","platformId","vcr","template","elementsLoaderService","cdr","ngOnChanges","changes","next","ngOnInit","setupUrlListener","unsubscribe","destroyEmbeddedView","destroyed","detach","destroy","tpl","elementTag","_declarationTContainer","tagName","value","_def","element","nodes","name","elementConfig","loadingComponent","pipe","createEmbeddedView","createComponent","clear","errorComponent","markForCheck","customElements","whenDefined","subscribe","ɵdir","selector","LOG_PREFIX","LazyElementDynamicDirective","renderer","length","loadElement$","originalCreateElement","namespace","createLazyElementRootGuard","rootOptions","TypeError","LazyElementsModule","forRoot","ngModule","providers","provide","useValue","elementConfigs","multi","useFactory","deps","forFeature","lazyElementsLoaderService","elementConfigsMultiProvider","guard","constructor","some","ɵmod","ɵinj","declarations","imports","exports"],"sources":["D:/client/final/angular-shell/node_modules/@angular-extensions/elements/fesm2022/angular-extensions-elements-src-lib-lazy-elements.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, ErrorHandler, inject, Injectable, HostListener, PLATFORM_ID, ViewContainerRef, TemplateRef, ChangeDetectorRef, Directive, Input, Renderer2, Optional, SkipSelf, NgModule } from '@angular/core';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { Subscription, BehaviorSubject, animationFrameScheduler, debounceTime, EMPTY, catchError, from, switchMap, mergeMap } from 'rxjs';\n\nconst LAZY_ELEMENT_CONFIGS = new InjectionToken('LAZY_ELEMENT_CONFIGS');\nconst LAZY_ELEMENT_ROOT_OPTIONS = new InjectionToken('LAZY_ELEMENT_ROOT_OPTIONS');\nconst LAZY_ELEMENT_ROOT_GUARD = new InjectionToken('LAZY_ELEMENT_ROOT_GUARD');\nconst LAZY_ELEMENTS_REGISTRY = new InjectionToken('LAZY_ELEMENTS_REGISTRY', {\n    providedIn: 'root',\n    factory: () => new Map(),\n});\n\nconst LOG_PREFIX$2 = '@angular-extensions/elements';\nclass LazyElementsLoaderService {\n    static controller = new AbortController();\n    configs = [];\n    errorHandler = inject(ErrorHandler);\n    registry = inject(LAZY_ELEMENTS_REGISTRY);\n    options = inject(LAZY_ELEMENT_ROOT_OPTIONS, { optional: true }) ?? {};\n    addConfigs(newConfigs) {\n        newConfigs.forEach((newConfig) => {\n            const existingConfig = this.getElementConfig(newConfig.tag);\n            if (existingConfig) {\n                ngDevMode &&\n                    console.warn(`${LOG_PREFIX$2} - ElementConfig for tag '${newConfig.tag}' was previously added, it will not be added multiple times, continue...`);\n            }\n            else {\n                newConfig.isAdded = true;\n                this.configs.push(newConfig);\n                const shouldPreload = newConfig.preload !== undefined\n                    ? newConfig.preload\n                    : this.options.preload;\n                if (shouldPreload) {\n                    this.loadElement(newConfig.url, newConfig.tag, newConfig.isModule, newConfig.importMap, newConfig.hooks);\n                }\n            }\n        });\n    }\n    getElementConfig(tag) {\n        return this.configs.find((config) => config.tag === tag);\n    }\n    preload(tags) {\n        let configs = this.configs;\n        if (tags) {\n            configs = this.configs.filter((config) => tags.includes(config.tag));\n        }\n        configs.forEach((config) => this.loadElement(config.url, config.tag, config.isModule, config.importMap, config.hooks));\n    }\n    async loadElement(url, tag, isModule, importMap, hooksConfig) {\n        const config = this.getElementConfig(tag);\n        isModule ??= config?.isModule ?? this.options.isModule;\n        importMap ??= config?.importMap ?? this.options.importMap;\n        if (ngDevMode && !tag) {\n            throw new Error(`${LOG_PREFIX$2} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);\n        }\n        if (!url) {\n            if (ngDevMode && !config?.url && !importMap) {\n                throw new Error(`${LOG_PREFIX$2} - url for <${tag}> not found`);\n            }\n            else if (importMap) {\n                url = tag;\n            }\n            else {\n                url = config.url;\n            }\n        }\n        if (!this.hasElement(url)) {\n            const notifier = this.addElement(url);\n            const beforeLoadHook = hooksConfig?.beforeLoad ??\n                config?.hooks?.beforeLoad ??\n                this.options?.hooks?.beforeLoad;\n            const afterLoadHook = hooksConfig?.afterLoad ??\n                config?.hooks?.afterLoad ??\n                this.options?.hooks?.afterLoad;\n            if (importMap) {\n                url = await this.resolveImportMap(url);\n            }\n            const script = document.createElement('script');\n            if (isModule) {\n                script.type = 'module';\n            }\n            script.src = url;\n            const onLoad = () => {\n                if (afterLoadHook) {\n                    this.handleHook(afterLoadHook, tag)\n                        .then(notifier.resolve)\n                        .catch(notifier.reject);\n                }\n                else {\n                    notifier.resolve();\n                }\n                cleanup();\n            };\n            const onError = (error) => {\n                notifier.reject(error);\n                cleanup();\n                // Caretaker note: don't put it before the `reject` and `cleanup` since the user may have some\n                // custom error handler that will re-throw the error through `throw error`. Hence the code won't\n                // be executed, and the promise won't be rejected.\n                this.errorHandler.handleError(error);\n            };\n            // The `load` and `error` event listeners capture `this`. That's why they have to be removed manually.\n            // Otherwise, the `LazyElementsLoaderService` is not going to be GC'd.\n            function cleanup() {\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n            }\n            script.addEventListener('load', onLoad, {\n                signal: LazyElementsLoaderService.controller?.signal,\n            });\n            script.addEventListener('error', onError, {\n                signal: LazyElementsLoaderService.controller?.signal,\n            });\n            if (beforeLoadHook) {\n                this.handleHook(beforeLoadHook, tag)\n                    .then(() => document.body.appendChild(script))\n                    .catch(notifier.reject);\n            }\n            else {\n                document.body.appendChild(script);\n            }\n        }\n        return this.registry.get(this.stripUrlProtocol(url));\n    }\n    addElement(url) {\n        let notifier;\n        this.registry.set(this.stripUrlProtocol(url), new Promise((resolve, reject) => (notifier = { resolve, reject })));\n        return notifier;\n    }\n    hasElement(url) {\n        return this.registry.has(this.stripUrlProtocol(url));\n    }\n    stripUrlProtocol(url) {\n        return url.replace(/https?:\\/\\//, '');\n    }\n    handleHook(hook, tag) {\n        try {\n            return Promise.resolve(hook(tag));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async resolveImportMap(url) {\n        const System = window.System;\n        if (System) {\n            await System.prepareImport();\n            url = System.resolve(url);\n        }\n        else if (ngDevMode) {\n            throw new Error(`${LOG_PREFIX$2} - importMap feature depends on SystemJS library to be globally loaded but none was found, thus '${url}' can't be resolved. You should either load SystemJS or remove the importMap flag.`);\n        }\n        return url;\n    }\n    ngOnDestroy() {\n        LazyElementsLoaderService.controller?.abort();\n        LazyElementsLoaderService.controller = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsLoaderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsLoaderService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsLoaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], propDecorators: { ngOnDestroy: [{\n                type: HostListener,\n                args: ['unloaded']\n            }] } });\n\nconst LOG_PREFIX$1 = '@angular-extensions/elements';\nclass LazyElementDirective {\n    url = null;\n    loadingTemplateRef = null;\n    errorTemplateRef = null;\n    isModule; // eslint-disable-line @angular-eslint/no-input-rename\n    importMap = false; // eslint-disable-line @angular-eslint/no-input-rename\n    viewRef = null;\n    subscription = Subscription.EMPTY;\n    url$ = new BehaviorSubject(null);\n    platformId = inject(PLATFORM_ID);\n    vcr = inject(ViewContainerRef);\n    template = inject((TemplateRef));\n    elementsLoaderService = inject(LazyElementsLoaderService);\n    cdr = inject(ChangeDetectorRef);\n    ngOnChanges(changes) {\n        if (changes.url) {\n            this.url$.next(this.url);\n        }\n    }\n    ngOnInit() {\n        // There's no sense to execute the below logic on the Node.js side since the JavaScript\n        // will not be loaded on the server-side (Angular will only append the script to body).\n        // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.\n        // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        this.setupUrlListener();\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    destroyEmbeddedView() {\n        if (this.viewRef && !this.viewRef.destroyed) {\n            this.viewRef.detach();\n            this.viewRef.destroy();\n            this.viewRef = null;\n        }\n    }\n    setupUrlListener() {\n        const tpl = this.template;\n        const elementTag = tpl._declarationTContainer\n            ? tpl._declarationTContainer.tagName || tpl._declarationTContainer.value\n            : tpl._def.element.template.nodes[0].element.name;\n        const elementConfig = this.elementsLoaderService.getElementConfig(elementTag) ||\n            {};\n        const options = this.elementsLoaderService.options;\n        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n        this.subscription = this.url$\n            .pipe(\n        // This is used to coalesce changes since the `url$` subject might emit multiple values initially, e.g.\n        // `null` (initial value) and the url itself (when the `url` binding is provided).\n        // The `animationFrameScheduler` is used to prevent the frame drop.\n        debounceTime(0, animationFrameScheduler), switchMap((url) => {\n            if (this.loadingTemplateRef) {\n                this.vcr.createEmbeddedView(this.loadingTemplateRef);\n            }\n            else if (loadingComponent) {\n                this.vcr.createComponent(loadingComponent);\n            }\n            return from(this.elementsLoaderService.loadElement(url, elementTag, this.isModule, this.importMap, elementConfig?.hooks)).pipe(catchError(() => {\n                this.vcr.clear();\n                const errorComponent = elementConfig.errorComponent || options.errorComponent;\n                if (this.errorTemplateRef) {\n                    this.vcr.createEmbeddedView(this.errorTemplateRef);\n                    this.cdr.markForCheck();\n                }\n                else if (errorComponent) {\n                    this.vcr.createComponent(errorComponent);\n                    this.cdr.markForCheck();\n                }\n                else if (ngDevMode) {\n                    console.error(`${LOG_PREFIX$1} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element`);\n                }\n                return EMPTY;\n            }));\n        }), mergeMap(() => customElements.whenDefined(elementTag)))\n            .subscribe({\n            next: () => {\n                this.vcr.clear();\n                this.viewRef = this.vcr.createEmbeddedView(this.template);\n                this.cdr.markForCheck();\n            },\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: LazyElementDirective, selector: \"[axLazyElement]\", inputs: { url: [\"axLazyElement\", \"url\"], loadingTemplateRef: [\"axLazyElementLoadingTemplate\", \"loadingTemplateRef\"], errorTemplateRef: [\"axLazyElementErrorTemplate\", \"errorTemplateRef\"], isModule: [\"axLazyElementModule\", \"isModule\"], importMap: [\"axLazyElementImportMap\", \"importMap\"] }, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[axLazyElement]',\n                }]\n        }], propDecorators: { url: [{\n                type: Input,\n                args: ['axLazyElement']\n            }], loadingTemplateRef: [{\n                type: Input,\n                args: ['axLazyElementLoadingTemplate']\n            }], errorTemplateRef: [{\n                type: Input,\n                args: ['axLazyElementErrorTemplate']\n            }], isModule: [{\n                type: Input,\n                args: ['axLazyElementModule']\n            }], importMap: [{\n                type: Input,\n                args: ['axLazyElementImportMap']\n            }] } });\n\nconst LOG_PREFIX = '@angular-extensions/elements';\nclass LazyElementDynamicDirective {\n    tag = null;\n    url = null; // eslint-disable-line @angular-eslint/no-input-rename\n    loadingTemplateRef = null;\n    errorTemplateRef = null;\n    isModule = false; // eslint-disable-line @angular-eslint/no-input-rename\n    importMap = false; // eslint-disable-line @angular-eslint/no-input-rename\n    viewRef = null;\n    subscription = Subscription.EMPTY;\n    platformId = inject(PLATFORM_ID);\n    document = inject(DOCUMENT);\n    renderer = inject(Renderer2);\n    vcr = inject(ViewContainerRef);\n    cdr = inject(ChangeDetectorRef);\n    template = inject((TemplateRef));\n    elementsLoaderService = inject(LazyElementsLoaderService);\n    ngOnInit() {\n        // There's no sense to execute the below logic on the Node.js side since the JavaScript\n        // will not be loaded on the server-side (Angular will only append the script to body).\n        // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.\n        // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        if (ngDevMode) {\n            if (!this.tag || this.tag.length === 0 || !this.tag.includes('-')) {\n                throw new Error(`${LOG_PREFIX} - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic=\"'some-tag'\"), got: \"${this.tag}\"`);\n            }\n        }\n        const tag = this.tag;\n        const elementConfig = this.elementsLoaderService.getElementConfig(tag) || {};\n        const options = this.elementsLoaderService.options;\n        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n        if (this.loadingTemplateRef) {\n            this.vcr.createEmbeddedView(this.loadingTemplateRef);\n        }\n        else if (loadingComponent) {\n            this.vcr.createComponent(loadingComponent);\n        }\n        const loadElement$ = from(this.elementsLoaderService.loadElement(this.url, tag, this.isModule, this.importMap, elementConfig?.hooks));\n        this.subscription = loadElement$\n            .pipe(mergeMap(() => customElements.whenDefined(tag)))\n            .subscribe({\n            next: () => {\n                this.vcr.clear();\n                const originalCreateElement = this.renderer.createElement;\n                this.renderer.createElement = (name, namespace) => {\n                    if (name === 'ax-lazy-element') {\n                        name = tag;\n                    }\n                    return this.document.createElement(name);\n                };\n                this.viewRef = this.vcr.createEmbeddedView(this.template);\n                this.renderer.createElement = originalCreateElement;\n                this.cdr.markForCheck();\n            },\n            error: (error) => {\n                const errorComponent = elementConfig.errorComponent || options.errorComponent;\n                this.vcr.clear();\n                if (this.errorTemplateRef) {\n                    this.vcr.createEmbeddedView(this.errorTemplateRef);\n                    this.cdr.markForCheck();\n                }\n                else if (errorComponent) {\n                    this.vcr.createComponent(errorComponent);\n                    this.cdr.markForCheck();\n                }\n                else if (ngDevMode) {\n                    console.error(`${LOG_PREFIX} - Loading of element <${this.tag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic=\"errorTemplate: error\" to display customized error message in place of element\\n\\n`, error);\n                }\n            },\n        });\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    destroyEmbeddedView() {\n        if (this.viewRef && !this.viewRef.destroyed) {\n            this.viewRef.detach();\n            this.viewRef.destroy();\n            this.viewRef = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementDynamicDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.1\", type: LazyElementDynamicDirective, selector: \"[axLazyElementDynamic]\", inputs: { tag: [\"axLazyElementDynamic\", \"tag\"], url: [\"axLazyElementDynamicUrl\", \"url\"], loadingTemplateRef: [\"axLazyElementDynamicLoadingTemplate\", \"loadingTemplateRef\"], errorTemplateRef: [\"axLazyElementDynamicErrorTemplate\", \"errorTemplateRef\"], isModule: [\"axLazyElementDynamicModule\", \"isModule\"], importMap: [\"axLazyElementDynamicImportMap\", \"importMap\"] }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementDynamicDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[axLazyElementDynamic]',\n                }]\n        }], propDecorators: { tag: [{\n                type: Input,\n                args: ['axLazyElementDynamic']\n            }], url: [{\n                type: Input,\n                args: ['axLazyElementDynamicUrl']\n            }], loadingTemplateRef: [{\n                type: Input,\n                args: ['axLazyElementDynamicLoadingTemplate']\n            }], errorTemplateRef: [{\n                type: Input,\n                args: ['axLazyElementDynamicErrorTemplate']\n            }], isModule: [{\n                type: Input,\n                args: ['axLazyElementDynamicModule']\n            }], importMap: [{\n                type: Input,\n                args: ['axLazyElementDynamicImportMap']\n            }] } });\n\nfunction createLazyElementRootGuard(rootOptions) {\n    if (ngDevMode && rootOptions) {\n        throw new TypeError(`LazyElementsModule.forRoot() called twice. Feature modules should use LazyElementsModule.forFeature() instead.`);\n    }\n    return 'LazyElementsModule.forRoot() multiple execution guard';\n}\nclass LazyElementsModule {\n    static forRoot(options) {\n        return {\n            ngModule: LazyElementsModule,\n            providers: [\n                {\n                    provide: LAZY_ELEMENT_CONFIGS,\n                    useValue: options && options.elementConfigs ? options.elementConfigs : [],\n                    multi: true,\n                },\n                {\n                    provide: LAZY_ELEMENT_ROOT_OPTIONS,\n                    useValue: options.rootOptions ? options.rootOptions : {},\n                },\n                {\n                    provide: LAZY_ELEMENT_ROOT_GUARD,\n                    useFactory: createLazyElementRootGuard,\n                    deps: [[LAZY_ELEMENT_ROOT_OPTIONS, new Optional(), new SkipSelf()]],\n                },\n            ],\n        };\n    }\n    static forFeature(options) {\n        return {\n            ngModule: LazyElementsModule,\n            providers: [\n                {\n                    provide: LAZY_ELEMENT_CONFIGS,\n                    useValue: options && options.elementConfigs ? options.elementConfigs : [],\n                    multi: true,\n                },\n            ],\n        };\n    }\n    lazyElementsLoaderService = inject(LazyElementsLoaderService);\n    elementConfigsMultiProvider = inject(LAZY_ELEMENT_CONFIGS, { optional: true });\n    guard = inject(LAZY_ELEMENT_ROOT_GUARD, { optional: true });\n    constructor() {\n        if (this.elementConfigsMultiProvider &&\n            this.elementConfigsMultiProvider.length) {\n            this.elementConfigsMultiProvider\n                .filter((configs) => configs.some((config) => !config.isAdded))\n                .forEach((configs) => this.lazyElementsLoaderService.addConfigs(configs));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsModule, declarations: [LazyElementDirective, LazyElementDynamicDirective], imports: [CommonModule], exports: [LazyElementDirective, LazyElementDynamicDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsModule, imports: [CommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.1\", ngImport: i0, type: LazyElementsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LazyElementDirective, LazyElementDynamicDirective],\n                    imports: [CommonModule],\n                    exports: [LazyElementDirective, LazyElementDynamicDirective],\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LAZY_ELEMENTS_REGISTRY, LAZY_ELEMENT_CONFIGS, LAZY_ELEMENT_ROOT_GUARD, LAZY_ELEMENT_ROOT_OPTIONS, LazyElementDirective, LazyElementDynamicDirective, LazyElementsLoaderService, LazyElementsModule, createLazyElementRootGuard };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}